[{"name":"/Visual Comps/TinyMCE","nodes":[{"id":"5cc1c1f7-e908-7189-1d6f-230365b19957","type":"Group","parameters":{},"ports":[],"children":[{"id":"26e373c5-0875-2d6d-c88a-02fa6169af42","type":"Group","parameters":{"cssClassName":"tinyMCE"},"ports":[],"children":[]}]},{"id":"c716fe3f-feea-9256-9d93-93876b1a9029","type":"JavaScriptFunction","parameters":{"functionScript":"// uniqueId is making sure that we only load a script once\r\n// TODO: This could depend on the scriptUrl\r\nconst uniqueId = '--tinymce-js--'\r\n\r\n// The script url that we want to import\r\nconst apiKey = Inputs.ApiKey || 'no-api-key';\r\nconst scriptUrl = `https://cdn.tiny.cloud/1/${apiKey}/tinymce/6/tinymce.min.js`;\r\n\r\n// ---\r\n// Advanced Code\r\nconst windowKey = '__' + uniqueId + '_onload';\r\nfunction injectScript(onload) {\r\n    if (document.querySelectorAll('#' + uniqueId).length === 0) {\r\n        window[windowKey] = [onload]\r\n\r\n        var script = document.createElement('script');\r\n        script.id = uniqueId;\r\n        script.setAttribute('src', scriptUrl);\r\n        script.onload = () => {\r\n            window[windowKey].forEach(cb => cb())\r\n            window[windowKey] = []\r\n        }\r\n        document.head.appendChild(script)\r\n    } else {\r\n        if (window[windowKey].length > 0) {\r\n            window[windowKey].push(onload)\r\n        } else {\r\n            onload()\r\n        }\r\n    }\r\n}\r\n\r\ninjectScript(() => {\r\n    Outputs.Loaded();\r\n});\r\n"},"ports":[{"name":"in-ApiKey","displayName":"ApiKey","plug":"input","type":"*","group":"Inputs","index":4},{"name":"out-Loaded","displayName":"Loaded","plug":"output","type":"signal","group":"Outputs","index":5}],"children":[]},{"id":"5efc7fd5-270b-1a0c-dec8-475a0ddfd96b","type":"Javascript2","parameters":{"code":"Script.Outputs = {\r\n    HtmlContent: 'string',\r\n    Changed: 'signal',\r\n    Saved: 'signal',\r\n\r\n    File: 'cloudfile',\r\n    FileUploaded: 'signal'\r\n};\r\n\r\n// To make sure that the app is performant after long use,\r\n// we will save this current editor and delete it once this\r\n// node is not active anymore in the visual tree.\r\nlet currentEditor = null;\r\n\r\n// https://www.tiny.cloud/docs/tinymce/6/file-image-upload/#customizing-how-images-and-files-are-handled\r\nfunction images_upload_handler(blobInfo, progressCallback) {\r\n    return new Promise((resolve, reject) => {\r\n        const blob = blobInfo.blob(); // File object\r\n        Noodl.Files.upload(blob, {\r\n            onProgress: (progress) => {\r\n                progressCallback((progress.loaded / progress.total) * 100);\r\n            }\r\n        })\r\n            .then((file) => {\r\n                Script.Outputs.File = file;\r\n                Script.Outputs.FileUploaded();\r\n                resolve(file.url);\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n                Script.Outputs.FileUploadedFailed();\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nScript.Signals.Setup = function () {\r\n    // Get the DOM element from the Noodl Node connected from the \"This\" input.\r\n    const element = Script.Inputs.This.getDOMElement();\r\n\r\n    // Initialize the TinyMCE editor. \r\n    tinymce.init({\r\n        target: element,\r\n        // Lets remove the resize grip, and let Noodl handle the size\r\n        resize: false,\r\n        inline_styles: true,\r\n        menubar: false,\r\n        setup: function (editor) {\r\n            currentEditor = editor;\r\n\r\n            // Listen to all the change events\r\n            // https://www.tiny.cloud/docs/tinymce/6/events/#supported-browser-native-events\r\n            editor.on('init', function () {\r\n                if (Script.Inputs.Content) {\r\n                    // Set the default value here\r\n                    editor.setContent(Script.Inputs.Content);\r\n                }\r\n            });\r\n\r\n            function onChange() {\r\n                // Output the current HTML Content\r\n                Script.Outputs.HtmlContent = editor.getContent();\r\n\r\n                // Send a signal that the content have changed\r\n                Script.Outputs.Changed();\r\n            }\r\n\r\n            // Fired when the editor content changes have been committed,\r\n            // such as when moving focus away from the editor.\r\n            editor.on('change', function (e) {\r\n                onChange();\r\n            });\r\n\r\n            editor.on('keyup', function (e) {\r\n                onChange();\r\n            });\r\n        },\r\n        plugins: [\r\n            'code', 'codesample', 'emoticons', 'image', 'link', 'lists', 'wordcount'\r\n       ],\r\n        toolbar: 'undo redo | formatpainter casechange blocks | bold italic backcolor | ' +\r\n            'alignleft aligncenter alignright alignjustify | ' +\r\n            'bullist numlist checklist outdent indent | removeformat | a11ycheck code table help'\r\n    });\r\n};\r\n\r\n// To avoid any odd UX, we only want to update the Content on demand,\r\n// So to update the content after the initial content, we have to call this signal.\r\nScript.Signals.UpdateContent = function () {\r\n    if (!currentEditor) return;\r\n\r\n    const newContent = Script.Inputs.Content || '';\r\n    currentEditor.setContent(newContent);\r\n};\r\n\r\n// called when the node is unmounted\r\nScript.OnDestroy = function () {\r\n    if (!currentEditor) return;\r\n\r\n    currentEditor.destroy();\r\n    currentEditor = null;\r\n}\r\n"},"ports":[{"name":"Setup","plug":"input","type":{"name":"signal"},"group":"Inputs","index":5},{"name":"UpdateContent","plug":"input","type":{"name":"signal"},"group":"Inputs","index":6},{"name":"HtmlContent","type":{"name":"string"},"plug":"output","group":"Outputs","index":7},{"name":"Changed","type":{"name":"signal"},"plug":"output","group":"Outputs","index":8},{"name":"Saved","type":{"name":"signal"},"plug":"output","group":"Outputs","index":9},{"name":"File","type":{"name":"cloudfile"},"plug":"output","group":"Outputs","index":10},{"name":"FileUploaded","type":{"name":"signal"},"plug":"output","group":"Outputs","index":11},{"name":"This","displayName":"This","plug":"input","type":"*","group":"Inputs","index":12},{"name":"Content","displayName":"Content","plug":"input","type":"*","group":"Inputs","index":13},{"name":"FileUploadedFailed","displayName":"FileUploadedFailed","plug":"output","type":"signal","group":"Outputs","index":14}],"children":[]},{"id":"e9743838-f4b5-c7f4-44e1-3bc2a5200de5","type":"Component Outputs","parameters":{},"ports":[],"children":[]},{"id":"b5b2a1b2-fb85-711c-c073-d7ae1b1f4d14","type":"Component Inputs","parameters":{},"ports":[],"children":[]},{"id":"4eadeadb-8b05-39a9-2f9d-d186992d465a","type":"CSS Definition","parameters":{"style":".tinyMCE {\r\n    height: 100%;\r\n}\r\n\r\n"},"ports":[],"children":[]},{"id":"f776163f-bb70-607d-8df5-982c8cf7f70d","type":"String","parameters":{"value":"gzf4rhz0w14tetudvpmcpunzioqydc77yv4qr90bggznh76u"},"ports":[],"children":[]}],"connections":[{"sourceId":"26e373c5-0875-2d6d-c88a-02fa6169af42","sourcePort":"didMount","targetId":"c716fe3f-feea-9256-9d93-93876b1a9029","targetPort":"run"},{"sourceId":"c716fe3f-feea-9256-9d93-93876b1a9029","sourcePort":"out-Loaded","targetId":"5efc7fd5-270b-1a0c-dec8-475a0ddfd96b","targetPort":"Setup"},{"sourceId":"26e373c5-0875-2d6d-c88a-02fa6169af42","sourcePort":"this","targetId":"5efc7fd5-270b-1a0c-dec8-475a0ddfd96b","targetPort":"This"},{"sourceId":"5efc7fd5-270b-1a0c-dec8-475a0ddfd96b","sourcePort":"HtmlContent","targetId":"e9743838-f4b5-c7f4-44e1-3bc2a5200de5","targetPort":"Html Content"},{"sourceId":"5efc7fd5-270b-1a0c-dec8-475a0ddfd96b","sourcePort":"Changed","targetId":"e9743838-f4b5-c7f4-44e1-3bc2a5200de5","targetPort":"Changed"},{"sourceId":"5efc7fd5-270b-1a0c-dec8-475a0ddfd96b","sourcePort":"Saved","targetId":"e9743838-f4b5-c7f4-44e1-3bc2a5200de5","targetPort":"Saved"},{"sourceId":"b5b2a1b2-fb85-711c-c073-d7ae1b1f4d14","sourcePort":"Content","targetId":"5efc7fd5-270b-1a0c-dec8-475a0ddfd96b","targetPort":"Content"},{"sourceId":"b5b2a1b2-fb85-711c-c073-d7ae1b1f4d14","sourcePort":"Update Content","targetId":"5efc7fd5-270b-1a0c-dec8-475a0ddfd96b","targetPort":"UpdateContent"},{"sourceId":"f776163f-bb70-607d-8df5-982c8cf7f70d","sourcePort":"savedValue","targetId":"c716fe3f-feea-9256-9d93-93876b1a9029","targetPort":"in-ApiKey"}],"ports":[{"name":"Html Content","type":{"name":"string"},"plug":"output","index":1},{"name":"Content","type":"*","group":"Inputs","plug":"input","index":1},{"name":"Changed","type":{"name":"signal"},"plug":"output","index":2},{"name":"Update Content","type":{"name":"signal"},"group":"Inputs","plug":"input","index":2},{"name":"Saved","type":{"name":"signal"},"plug":"output","index":3}],"roots":["5cc1c1f7-e908-7189-1d6f-230365b19957"]}]